@page
@model IndexModel

@{
    ViewData["Title"] = "PhotoAlbum - Main page";
}

<div class="container mt-5" style="height: 100vh;">
    <!-- Welcome Section -->
  
    <div class="card-body text-center" style="font-size: 1.5rem; line-height: 1.8;">
        <h1 class="card-title" style="font-size: 3rem; line-height: 1.2;">Welcome to PhotoAlbum!</h1>
        

        <p class="card-text" style="font-size: 1.5rem; line-height: 1.8;">
            This is the main demo page of the PhotoAlbum sample .NET application of Cloudinary.<br />
            Here, you can see all the images you have uploaded to this .NET application and find some information on how to implement your own .NET application to store, manipulate, and serve your photos using Cloudinary.
        </p>
    </div>

    <!-- Cloudinary Info Section -->
    <div class="card-body text-center" style="font-size: 1.5rem; line-height: 1.8;">
        <h2 style="font-size: 2.5rem; line-height: 1.4;">Cloudinary Image Transformation</h2>
        <p style="font-size: 1.5rem; line-height: 1.8;">
            All of the images you see here are transformed and served by Cloudinary. For instance, the logo and the poster frame. These images were not even uploaded to Cloudinary—they are retrieved by the service, transformed, cached, and distributed through a CDN.
        </p>
        <p style="font-size: 1.5rem; line-height: 1.8;">
            Cloudinary’s powerful functions like <strong>fetch_image_tag</strong> and <strong>facebook_profile_image_tag</strong> allow you to manipulate images effortlessly.
        </p>
    </div>

    <!-- Call-to-Action Section -->
    <div class="text-center mt-4 w-100">
        <a href="/Upload" class="btn btn-primary btn-lg">Upload Your Photos Now</a>
    </div>
    <div id="posterframe mt-1">
        <!-- This will render the fetched Facebook profile picture using Cloudinary according to the
             requested transformations -->
        @Html.Raw(Cloudinary.Api.UrlImgUp.Action("facebook").Format("png")
                 .Transform(new Transformation()
                 .Width(95)
                 .Height(95)
                 .Crop("thumb")
                 .Gravity("face")
                 .Effect("sepia")
                 .Radius(20)
                 .Chain() // apply current stack of transformations before processing next
                 .Angle(10))
                 .BuildImageTag("officialchucknorrispage"))
    </div>
    <div id="logo-container" style="position: relative; width: 100%; height: 100%;">
        <div id="logo" style="position: absolute; top: 10%; left: 10%; width: 20%;">
            <!-- This will render the image fetched from a remote HTTP URL using Cloudinary -->
            @Html.Raw(Cloudinary.Api.UrlImgUp.Signed(true).Secure().Action("fetch").Transform(new Transformation()
                 .Width(344)
                 .Height(76)).BuildImageTag("http://cloudinary.com/images/logo.png"))
        </div>
    </div>
</div>


<h1>Your Photos</h1>


<div class="photos">
    @if (Model.Photos.Count == 0)
    {
        <p>No photos were uploaded yet.</p>
    }
    else
    {
        foreach (var img in Model.Photos)
        {
            <div class="photo">
                <a href="@Cloudinary.Api.UrlImgUp.Format(img.Format).BuildUrl(img.PublicId)"
                   target="_blank" class="public_id_link">
                    <div class="public_id">
                        @img.PublicId
                    </div>
                    @Html.Raw(Cloudinary.Api.UrlImgUp.Format("jpg").Transform(new Transformation().Height(150).Width(150).Crop("fill")).BuildImageTag(img.PublicId, new StringDictionary("class=thumbnail inline")))
                </a>

                <div class="less_info">
                    <a href="#" class="toggle_info">More transformations...</a>
                </div>

                <div class="more_info">
                    <a href="#" class="toggle_info">Hide transformations...</a>
                    <table class="thumbnails">
                        <tr>
                            @{
                                var basicTransform = new Transformation().Height(150).Width(150);
                                var basicUrl = Cloudinary.Api.UrlImgUp.Format("jpg");
                                var urls = new List<Url>
                                {
                                    basicUrl.Clone().Transform(basicTransform.Clone().Crop("fill").Radius(10)),
                                    basicUrl.Clone().Transform(basicTransform.Clone().Crop("scale")),
                                    basicUrl.Clone().Format("png").Transform(basicTransform.Clone().Crop("fit")),
                                    basicUrl.Clone().Transform(basicTransform.Clone().Crop("thumb").Gravity("face")),
                                    basicUrl.Clone().Format("png").Transform(basicTransform.Clone().Width(150).Height(150).Crop("fill").Gravity("north").Effect("sepia").Chain().Angle(20))
                                };

                                foreach (var url in urls)
                                {
                                    <td>
                                        <div class="thumbnail_holder">
                                            <a target="_blank" href="@url.BuildUrl(img.PublicId)">
                                                @Html.Raw(url.BuildImageTag(img.PublicId, new StringDictionary("class=thumbnail inline")))
                                            </a>
                                        </div>
                                        <br />
                                        <table class='info'>
                                            <tr>
                                                <td>format</td>
                                                <td>@url.FormatValue</td>
                                            </tr>
                                            @foreach (var (key, value) in url.Transformation.Params)
                                            {
                                                <tr>
                                                    <td>@key</td>
                                                    <td>@value</td>
                                                </tr>

                                            }
                                            @foreach (var nestedTransform in url.Transformation.NestedTransforms)
                                            {
                                                <tr>
                                                    <td>nested</td>
                                                    <td>
                                                        @foreach (var (key, value) in nestedTransform.Params)
                                                        {
                                                            @($"{key}: {value}")
                                                            <br />
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </table>
                                    </td>
                                }
                            }
                        </tr>
                    </table>

                    <div class="note">
                        Take a look at our documentation of <a href="http://cloudinary.com/documentation/image_transformations" target="_blank">Image Transformations</a> for a full list of supported transformations.
                    </div>
                </div>
            </div>
        }
    }
</div>

@section scripts
{
    <script type="text/javascript">
        $(function () {
            $('.toggle_info').click(function () {
                $(this).closest('.photo').toggleClass('show_more_info');
                return false;
            });
        });
    </script>
}
